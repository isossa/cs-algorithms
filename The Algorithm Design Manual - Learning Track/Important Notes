The Algorithm Design Manual by Steven S. Skiena - Notes

An algorithm is a procedure to accomplish a specific task. It is a procedure that takes any of the possible input instances and transforms it to the desired output. [Skiena08]
There are three desirable properties for a good algorithm:
a. Correctness
b. Efficiency
c. Easy implementation

There is a fundamental difference between algorithms, which always produce a correct result, and heuristics, which may usually do a good job without providing any guarantee.

Even though an algorithm could look reasonably correct it can turn out to be incorrect. To clear all uncertainty, algorithm correctness or incorrectness must be carefully demonstrated using formal proof.

A proof is a demonstration. Proofs are useful only when they are honest. A proof consists of several parts. First, there is a clear, precise statement of what is to be proven, claim or proposition. Second, there is a set of assumptions of things which are taken to be true and hence used as part of the proof. Third, there is a chain of logical reasoning which takes from the original assumptions to claim. Finally, there is a little square or QED (Quod Erat Demonstrandum), representing the Latin expression "what is to be proven".

Many proof techniques exist to help you in this endeavor, one of which is counter-examples.

Good algorithm problems have two essential parts (1) the set of allowed input instances and (2) the required properties of the algorithm's output.

Logarithms
A logarithm is the inverse of an exponential function. Therefore, b^x = y <=> x = log_b(y). A powerful example of logarithmic algorithm (anagram of each otther) is the binary search.

